# -*- coding: utf-8 -*-
"""Transformation_function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B-j8Jn8m1MqagjAhNzKb173WrHH0zIUz

# **Linear Transformation**
"""

import cv2
import numpy as np
import matplotlib.pylab as plt

alpha, beta, gamma = 1, 0, 1

def basic_linear_transform(img, alpha, beta):
    return cv2.convertScaleAbs(img, alpha=alpha, beta=beta)

image = cv2.imread('image1.jpg')

plt.figure(figsize=(20,20))
i = 1
for alpha in [0.25, 0.5, 1, 1.5, 2.5]:
    for beta in [0, 0.5, 1, 1.5, 2]:
        image_corrected = basic_linear_transform(image, alpha, beta)
        plt.subplot(5,5,i), plt.imshow(cv2.cvtColor(image_corrected, cv2.COLOR_BGR2RGB)), plt.axis('off')
        plt.title(r'$\alpha$={:.2f}, $\beta$={:.2f}'.format(alpha, beta), size=20)
        i += 1
plt.suptitle('Basic linear transform to change brightness', size=30)
plt.show()

"""### **Negative Transformation**

"""

import cv2
import matplotlib.pylab as plt

def negative_image(img):
    return 255 - img

image = cv2.imread('cranial.jpg')

image_neg = negative_image(image)

# Plot original and negative images side by side
plt.figure(figsize=(20,20))

plt.subplot(1,2,1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image', fontsize=20, fontweight='600')
plt.axis('off')

plt.subplot(1,2,2)
plt.imshow(cv2.cvtColor(image_neg, cv2.COLOR_BGR2RGB))
plt.title('Negative Image', fontsize=20, fontweight='600')
plt.axis('off')

plt.suptitle('Image Negative Effect', fontsize=28, fontweight='700', y=0.95)
plt.tight_layout(rect=[0, 0, 1, 0.9])
plt.show()

"""## **Power- law transformation(Gamma Correction)**"""

import cv2
import numpy as np
import matplotlib.pylab as plt

def gamma_correction(img, gamma):
    lookup_table = np.empty((1,256), np.uint8)
    for i in range(256):
        lookup_table[0,i] = np.clip(pow(i / 255.0, gamma) * 255.0, 0, 255)
    return cv2.LUT(img, lookup_table)

image = cv2.imread('image1.jpg')


plt.figure(figsize=(20,20))
i = 1
for gamma in np.linspace(0, 2, 16):
    image_gamma_corrected = gamma_correction(image, gamma)
    plt.subplot(4,4,i), plt.imshow(cv2.cvtColor(image_gamma_corrected, cv2.COLOR_BGR2RGB)), plt.axis('off')
    plt.title(r'$\gamma$={:.2f}'.format(gamma))
    i += 1
plt.suptitle('Gamma correction', size=30)
plt.show()

"""# **Log Transformation**"""

import cv2
import numpy as np
import matplotlib.pylab as plt

def log_transformation(img, c=1):
    img_float = img.astype(np.float32)
    img_log = c * np.log1p(img_float)
    img_log_norm = cv2.normalize(img_log, None, 0, 255, cv2.NORM_MINMAX)
    return img_log_norm.astype(np.uint8)


image = cv2.imread('slit.jpg')


image_log = log_transformation(image, c=30)


plt.figure(figsize=(14,7))
plt.suptitle('Log Transformation', fontsize=32, weight='bold', y=0.95)

plt.subplot(1,2,1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image', fontsize=20, weight='semibold')
plt.axis('off')

plt.subplot(1,2,2)
plt.imshow(cv2.cvtColor(image_log, cv2.COLOR_BGR2RGB))
plt.title('Log Transformed Image', fontsize=20, weight='semibold')
plt.axis('off')

plt.tight_layout(rect=[0, 0, 1, 0.9])
plt.show()